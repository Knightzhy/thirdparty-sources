#include <gtest/gtest.h>
#include <queue>

bool IsEvenNumberParam(int n)
{
    if (n < 0) {
        return false;
    }
    if (n%2 > 0) {
        return false;
    }
    return true;
}

class IsEvenNumberParamTest : public ::testing::TestWithParam<int>
{
public:
    IsEvenNumberParamTest(){}
    ~IsEvenNumberParamTest(){}
protected:
    bool testBool(){return true;}
};

template <typename E> // E is the element type.
class Queue {
public:
    Queue(){}
    ~Queue(){}
    void Enqueue(const E& element)
    {
        E *e = new E;
        *e = element;
        q.push(e);
    }
    E* Dequeue()
    {
        if (q.size()==0) {
            return NULL;
        }
        E* element = q.front();
        q.pop();
        return element;
    }
    size_t size() const{
        return q.size();
    }
private:
    std::queue<E*> q;
};

class QueueTest : public ::testing::Test {
 protected:
  virtual void SetUp() {
    q1_.Enqueue(1);
    q2_.Enqueue(2);
    q2_.Enqueue(3);
  }
  // virtual void TearDown() {}
  Queue<int> q0_;
  Queue<int> q1_;
  Queue<int> q2_;
};

TEST_P(IsEvenNumberParamTest, t)
{
    int n = GetParam();
    EXPECT_TRUE(IsEvenNumberParam(n));
    EXPECT_TRUE(testBool());
}


TEST_F(QueueTest, IsEmptyInitially) {
  EXPECT_EQ(0, q0_.size());
}

TEST_F(QueueTest, DequeueWorks) {
  int* n = q0_.Dequeue();
  EXPECT_EQ(NULL, n);

  n = q1_.Dequeue();
  ASSERT_TRUE(n != NULL);
  EXPECT_EQ(1, *n);
  EXPECT_EQ(0, q1_.size());
  delete n;

  n = q2_.Dequeue();
  ASSERT_TRUE(n != NULL);
  EXPECT_EQ(2, *n);
  EXPECT_EQ(1, q2_.size());
  delete n;

  n = q2_.Dequeue();
  ASSERT_TRUE(n != NULL);
  EXPECT_EQ(3, *n);
  EXPECT_EQ(0, q2_.size());
  delete n;
}

TEST(ATest, ATesta)
{
    ASSERT_TRUE(true);
    ASSERT_FALSE(false);
    EXPECT_TRUE(true);
    EXPECT_FALSE(true);

    /* EQ ==, NE !=, LT <, LE <=, GT >, GE >=
     */
    ASSERT_EQ(1,1);
    EXPECT_EQ(1,2);

    /*
     * the two C strings have the same content
     * */
    ASSERT_STREQ("aaa", "aaa");
    EXPECT_STREQ("aaa", "bbb");

    /*
     * the two C strings have different content
     * */
    ASSERT_STRNE("aaa", "bbb");
    EXPECT_STRNE("aaa", "aaa");

    /*
     * the two C strings have the same content, ignoring case
     * */
    ASSERT_STRCASEEQ("aaa", "AAA");
    EXPECT_STRCASEEQ("aaa", "AAA");

    /*
     * the two C strings have different content, ignoring case
     * */
    ASSERT_STRCASENE("aaa", "bbb");
    EXPECT_STRCASENE("aaa", "AAA");

}

INSTANTIATE_TEST_CASE_P(t0, IsEvenNumberParamTest,
        testing::Values(-1,-2,0,1,3,4,5,6));
INSTANTIATE_TEST_CASE_P(t1, IsEvenNumberParamTest,
        testing::Range(10,20,1));
int values[] = {40,45,47};
INSTANTIATE_TEST_CASE_P(t2, IsEvenNumberParamTest,
        testing::ValuesIn(values));

int main(int argc, char*argv[])
{
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
